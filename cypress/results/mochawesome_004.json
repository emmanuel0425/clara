{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-02T01:42:07.163Z",
    "end": "2025-06-02T01:42:15.881Z",
    "duration": 8718,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "317996c4-a2ce-4472-adc1-e747511dbbcb",
      "title": "",
      "fullFile": "cypress/features/login.feature",
      "file": "cypress/features/login.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login with valid credentials (example #1)",
              "fullTitle": "Login Login with valid credentials (example #1)",
              "timedOut": null,
              "duration": 2640,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "36d6e0cf-df6f-4736-a546-cd0b17e81901",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #1)",
              "fullTitle": "Login Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #1)",
              "timedOut": null,
              "duration": 909,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "66365e2f-adfc-4c48-91ee-1613bc326283",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #2)",
              "fullTitle": "Login Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #2)",
              "timedOut": null,
              "duration": 877,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "9d3bc5ef-7250-48a9-bbe6-f0f3aec9d14b",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #3)",
              "fullTitle": "Login Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #3)",
              "timedOut": null,
              "duration": 877,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "f1d14b30-10bc-4f09-86aa-1ddc9bb792c4",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #4)",
              "fullTitle": "Login Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #4)",
              "timedOut": null,
              "duration": 523,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "17849b5c-4928-447d-92fd-83e91faa2898",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #5)",
              "fullTitle": "Login Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #5)",
              "timedOut": null,
              "duration": 711,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "7b70d094-3f21-4688-a025-40752725f41f",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #6)",
              "fullTitle": "Login Login with invalid username, invalid password, invalid credentials, blank username, blank password and blank credentials (example #6)",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "f2f121c7-49c1-4867-8cf0-9f74929c03f7",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Navigate through the product catalog (example #1)",
              "fullTitle": "Login Navigate through the product catalog (example #1)",
              "timedOut": null,
              "duration": 1876,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a3, _b, _c, _d, _e3;\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\nif (context.messagesEnabled) {\n  taskTestCaseStarted({\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)()\n  });\n}\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: hook.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      (0, cypress_1.runStepWithLogGroup)({\n        fn: () => registry2.runHook(this, hook),\n        keyword: hook.keyword,\n        text: hook.tags\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const end = (0, messages_1.createTimestamp)();\n      if (context.messagesEnabled) {\n        taskTestStepFinished({\n          testStepId: hook.id,\n          testCaseStartedId,\n          testStepResult: {\n            status: messages.TestStepResultStatus.PASSED,\n            duration: (0, messages_1.duration)(start, end)\n          },\n          timestamp: end\n        });\n      }\n      remainingSteps.shift();\n    });\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n    const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      if (context.messagesEnabled) {\n        taskTestStepStarted({\n          testStepId: pickleStep.id,\n          testCaseStartedId,\n          timestamp: start\n        });\n      }\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId: pickleStep.id\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: beforeStepHook.tags,\n          fn: () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefininition(this, text, argument)\n          }).then((result) => {\n            return afterStepHooks.reverse().reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: afterStepHook.tags,\n                fn: () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => {\n      var _a4, _b2, _c2;\n      const end = (0, messages_1.createTimestamp)();\n      if (result === \"pending\") {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PENDING,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n          remainingSteps.shift();\n          for (const skippedStep of remainingSteps) {\n            const testStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n            taskTestStepStarted({\n              testStepId,\n              testCaseStartedId,\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n            taskTestStepFinished({\n              testStepId,\n              testCaseStartedId,\n              testStepResult: {\n                status: messages.TestStepResultStatus.SKIPPED,\n                duration: {\n                  seconds: 0,\n                  nanos: 0\n                }\n              },\n              timestamp: (0, messages_1.createTimestamp)()\n            });\n          }\n        }\n        for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n          remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n      } else {\n        if (context.messagesEnabled) {\n          taskTestStepFinished({\n            testStepId: pickleStep.id,\n            testCaseStartedId,\n            testStepResult: {\n              status: messages.TestStepResultStatus.PASSED,\n              duration: (0, messages_1.duration)(start, end)\n            },\n            timestamp: end\n          });\n        }\n        remainingSteps.shift();\n      }\n    });\n  }\n}",
              "err": {},
              "uuid": "b17e9ad8-74df-4c88-b1bc-0c7edc31273c",
              "parentUUID": "1c05ceaf-4e0e-42df-aa66-ffa4f93d9f48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36d6e0cf-df6f-4736-a546-cd0b17e81901",
            "66365e2f-adfc-4c48-91ee-1613bc326283",
            "9d3bc5ef-7250-48a9-bbe6-f0f3aec9d14b",
            "f1d14b30-10bc-4f09-86aa-1ddc9bb792c4",
            "17849b5c-4928-447d-92fd-83e91faa2898",
            "7b70d094-3f21-4688-a025-40752725f41f",
            "f2f121c7-49c1-4867-8cf0-9f74929c03f7",
            "b17e9ad8-74df-4c88-b1bc-0c7edc31273c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8614,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}